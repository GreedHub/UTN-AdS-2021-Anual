### Get devices
POST http://localhost:5000/graphql HTTP/1.1
X-Request-Type: GraphQL
Content-Type: application/json

query{
  devices{
    id,
    name,
    readings{
      timestamp,
      values{
        name,
        type,
        value,
        magnitude
      }
    }
  }
}

### Get device by id
POST http://localhost:5000/graphql HTTP/1.1
X-Request-Type: GraphQL
Content-Type: application/json

query{
  device(id:"2aseqwe"){
    id,
    name,
    readings{
      timestamp,
      values{
        name,
        type,
        value,
        magnitude
      }
    }
  }
}

###Create device
POST http://localhost:5000/graphql HTTP/1.1
X-Request-Type: GraphQL
Content-Type: application/json

mutation{ 
  createDevice(id:"2aseq3we",name:"testDevice"){
    id,
    name
  }
}

###Register reading
POST http://localhost:5000/graphql HTTP/1.1
X-Request-Type: GraphQL
Content-Type: application/json

mutation{
  createReading(
    deviceId:"2aseqwe",
    reading:{
      timestamp:"123456",
      name:"testTemp",
      type:"temperature",
      value:"20",
      magnitude:"C"
    }
  ){
    timestamp,
    name,
    type,
    value,
    magnitude
  }
}

### Get reading
POST http://localhost:5000/graphql HTTP/1.1
X-Request-Type: GraphQL
Content-Type: application/json

query{
    readings(deviceId:"TEMP_SENSOR",sensorName:"main_temp",filter:{from:1628716025510,to:1628716145526}){
        timestamp,
        name,
        type,
        value,
        magnitude 
    }  
}

###Create user
POST http://localhost:5000/graphql HTTP/1.1
X-Request-Type: GraphQL
Content-Type: application/json

mutation{ 
  createUser(firstName:"Example", lastName:"Name", username:"myUser", password:"myPassword", email:"email@example.com", tenantId:"MyTenantId"){
    firstName,
    lastName,
    username,
    email,
    tenantId,
  }
}

### Login
POST http://localhost:5000/graphql HTTP/1.1
X-Request-Type: GraphQL
Content-Type: application/json

query{
  login(username:"myUser", password:"myPassword"){
    token,
    refreshToken
  }
}